import timeit
import random
import matplotlib.pyplot as plt
import numpy as np
from heapq import heappush, heappop
import statistics

def insertion_sort(arr):
    """–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–≤–∫–∞–º–∏"""
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def merge_sort(arr):
    """–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–ª–∏—Ç—Ç—è–º"""
    if len(arr) <= 1:
        return arr
    
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    
    return merge(left, right)

def merge(left, right):
    """–ó–ª–∏—Ç—Ç—è –¥–≤–æ—Ö –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –º–∞—Å–∏–≤—ñ–≤"""
    result = []
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def timsort_wrapper(arr):
    """–û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è Timsort (–≤–±—É–¥–æ–≤–∞–Ω–∏–π sorted)"""
    return sorted(arr)

def generate_test_data(size, data_type="random"):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤"""
    if data_type == "random":
        return [random.randint(1, 1000) for _ in range(size)]
    elif data_type == "sorted":
        return list(range(size))
    elif data_type == "reverse":
        return list(range(size, 0, -1))
    elif data_type == "partially_sorted":
        arr = list(range(size))
        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 10% –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        for _ in range(size // 10):
            i, j = random.randint(0, size-1), random.randint(0, size-1)
            arr[i], arr[j] = arr[j], arr[i]
        return arr

def measure_time(algorithm, data, number=5):
    """–í–∏–º—ñ—Ä—é—î —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –∑ –∫—ñ–ª—å–∫–æ–º–∞ –∑–∞–ø—É—Å–∫–∞–º–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ"""
    times = []
    
    for _ in range(number):
        if algorithm.__name__ == 'timsort_wrapper':
            time_taken = timeit.timeit(lambda: sorted(data.copy()), number=1)
        else:
            time_taken = timeit.timeit(lambda: algorithm(data.copy()), number=1)
        times.append(time_taken)
    
    return {
        'mean': statistics.mean(times),
        'stdev': statistics.stdev(times) if len(times) > 1 else 0,
        'times': times
    }

def run_performance_analysis():
    """–û—Å–Ω–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é"""
    sizes = [100, 500, 1000, 2000, 5000, 10000]
    data_types = ["random", "sorted", "reverse", "partially_sorted"]
    algorithms = [insertion_sort, merge_sort, timsort_wrapper]
    
    results = {}
    
    print("üî¨ –ê–ù–ê–õ–Ü–ó –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü –ê–õ–ì–û–†–ò–¢–ú–Ü–í –°–û–†–¢–£–í–ê–ù–ù–Ø")
    print("=" * 80)
    
    for data_type in data_types:
        print(f"\nüìä –¢–∏–ø –¥–∞–Ω–∏—Ö: {data_type.upper()}")
        print("-" * 60)
        
        results[data_type] = {}
        
        for size in sizes:
            print(f"\n–†–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É: {size}")
            test_data = generate_test_data(size, data_type)
            
            for algorithm in algorithms:
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ insertion sort –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –º–∞—Å–∏–≤—ñ–≤
                if algorithm.__name__ == 'insertion_sort' and size > 5000:
                    print(f"  {algorithm.__name__:20}: –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–Ω–∞–¥—Ç–æ –ø–æ–≤—ñ–ª—å–Ω–æ)")
                    continue
                
                try:
                    time_stats = measure_time(algorithm, test_data)
                    
                    if algorithm.__name__ not in results[data_type]:
                        results[data_type][algorithm.__name__] = []
                    
                    results[data_type][algorithm.__name__].append((size, time_stats['mean']))
                    
                    print(f"  {algorithm.__name__:20}: {time_stats['mean']*1000:.2f} ¬± {time_stats['stdev']*1000:.2f} –º—Å")
                    
                except Exception as e:
                    print(f"  {algorithm.__name__:20}: –ü–æ–º–∏–ª–∫–∞ - {e}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫–∏
    create_performance_plots(results)
    
    return results

def create_performance_plots(results):
    """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è', fontsize=16)
    
    data_types = ["random", "sorted", "reverse", "partially_sorted"]
    titles = ["–í–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ", "–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ", "–ó–≤–æ—Ä–æ—Ç–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ", "–ß–∞—Å—Ç–∫–æ–≤–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ"]
    
    for idx, (data_type, title) in enumerate(zip(data_types, titles)):
        row = idx // 2
        col = idx % 2
        ax = axes[row, col]
        
        for alg_name, data_points in results[data_type].items():
            if data_points:
                sizes, times = zip(*data_points)
                ax.loglog(sizes, [t*1000 for t in times], 'o-', label=alg_name, linewidth=2, markersize=6)
        
        ax.set_xlabel('–†–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É')
        ax.set_ylabel('–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–º—Å)')
        ax.set_title(title)
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('sorting_performance.png', dpi=300, bbox_inches='tight')
    plt.show()
    print("üìà –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ 'sorting_performance.png'")

def create_complexity_plot():
    """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ"""
    sizes = np.array([100, 200, 500, 1000, 2000, 5000])
    
    # –¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ)
    linear = sizes
    nlogn = sizes * np.log2(sizes)
    quadratic = sizes ** 2
    
    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    linear = linear / linear[0]
    nlogn = nlogn / nlogn[0]  
    quadratic = quadratic / quadratic[0]
    
    plt.figure(figsize=(10, 6))
    plt.loglog(sizes, linear, 'g-', label='O(n)', linewidth=2)
    plt.loglog(sizes, nlogn, 'b-', label='O(n log n)', linewidth=2)
    plt.loglog(sizes, quadratic, 'r-', label='O(n¬≤)', linewidth=2)
    
    plt.xlabel('–†–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É')
    plt.ylabel('–í—ñ–¥–Ω–æ—Å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è')
    plt.title('–¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.savefig('complexity_comparison.png', dpi=300, bbox_inches='tight')
    plt.show()
    print("üìä –ì—Ä–∞—Ñ—ñ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ 'complexity_comparison.png'")
def analyze_complexity():
    """–ï–º–ø—ñ—Ä–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é"""
    print(f"\nüßÆ –ï–ú–ü–Ü–†–ò–ß–ù–ò–ô –ê–ù–ê–õ–Ü–ó –°–ö–õ–ê–î–ù–û–°–¢–Ü")
    print("=" * 50)
    
    sizes = [100, 200, 400, 800, 1600, 3200]
    algorithms = [insertion_sort, merge_sort, timsort_wrapper]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    create_complexity_plot()
    
    for algorithm in algorithms:
        print(f"\n{algorithm.__name__.upper()}:")
        times = []
        
        for size in sizes:
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ insertion sort –¥–ª—è –¥—É–∂–µ –≤–µ–ª–∏–∫–∏—Ö –º–∞—Å–∏–≤—ñ–≤
            if algorithm.__name__ == 'insertion_sort' and size > 1600:
                print(f"  –†–æ–∑–º—ñ—Ä {size:4}: –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–Ω–∞–¥—Ç–æ –ø–æ–≤—ñ–ª—å–Ω–æ)")
                continue
                
            test_data = generate_test_data(size, "random")
            time_stats = measure_time(algorithm, test_data, 3)
            time_taken = time_stats['mean']
            times.append(time_taken)
            
            # –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
            if algorithm.__name__ == 'insertion_sort':
                theoretical = size * size
            else:
                theoretical = size * np.log2(size)
            
            ratio = time_taken / theoretical * 1000000
            
            print(f"  –†–æ–∑–º—ñ—Ä {size:4}: {time_taken*1000:.2f} –º—Å (–∫–æ–µ—Ñ. {ratio:.2f})")

def merge_k_lists_heap(lists):
    """
    –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è merge_k_lists –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º heap
    –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(N log k) –¥–ª—è –≤—Å—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    """
    if not lists:
        return []
    
    result = []
    heap = []
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ heap –ø–µ—Ä—à–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ–∂–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    for i, lst in enumerate(lists):
        if lst:
            heappush(heap, (lst[0], i, 0))
    
    while heap:
        val, lst_idx, elem_idx = heappop(heap)
        result.append(val)
        
        # –î–æ–¥–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ —Ç–æ–≥–æ –∂ —Å–ø–∏—Å–∫—É
        elem_idx += 1
        if elem_idx < len(lists[lst_idx]):
            heappush(heap, (lists[lst_idx][elem_idx], lst_idx, elem_idx))
    
    return result

def demonstrate_timsort_efficiency():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ Timsort"""
    print(f"\n‚ö° –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ü–ï–†–ï–í–ê–ì TIMSORT")
    print("=" * 50)
    
    test_cases = [
        ("–ß–∞—Å—Ç–∫–æ–≤–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π", "partially_sorted"),
        ("–ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π", "sorted"),
        ("–ó–≤–æ—Ä–æ—Ç–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π", "reverse"),
        ("–í–∏–ø–∞–¥–∫–æ–≤–∏–π", "random")
    ]
    
    size = 2000
    
    for name, data_type in test_cases:
        print(f"\n{name} –º–∞—Å–∏–≤ ({size} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤):")
        test_data = generate_test_data(size, data_type)
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ merge_sort —Ç–∞ timsort –¥–ª—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        merge_time = measure_time(merge_sort, test_data, 3)
        timsort_time = measure_time(timsort_wrapper, test_data, 3)
        
        # –û–±—á–∏—Å–ª—é—î–º–æ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∑–∞ —Å–µ—Ä–µ–¥–Ω—ñ–º —á–∞—Å–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        speedup = merge_time['mean'] / timsort_time['mean']
        
        print(f"  Merge Sort: {merge_time['mean']*1000:.2f} –º—Å")
        print(f"  Timsort:    {timsort_time['mean']*1000:.2f} –º—Å")
        print(f"  –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: {speedup:.1f}x")

def merge_k_lists(lists):
    """
    –ù–ï–û–ë–û–í'–Ø–ó–ö–û–í–ï –ó–ê–í–î–ê–ù–ù–Ø
    –ó–ª–∏—Ç—Ç—è k –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤ —É –æ–¥–∏–Ω –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    if not lists:
        return []
    
    while len(lists) > 1:
        merged_lists = []
        
        # –ó–ª–∏–≤–∞—î–º–æ —Å–ø–∏—Å–∫–∏ –ø–æ–ø–∞—Ä–Ω–æ
        for i in range(0, len(lists), 2):
            left = lists[i]
            right = lists[i + 1] if i + 1 < len(lists) else []
            merged_lists.append(merge(left, right))
        
        lists = merged_lists
    
    return lists[0]

def test_merge_k_lists():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±–æ—Ö –≤–µ—Ä—Å—ñ–π merge_k_lists"""
    print(f"\nüîó –¢–ï–°–¢–£–í–ê–ù–ù–Ø MERGE_K_LISTS")
    print("=" * 40)
    
    test_cases = [
        [[1, 4, 5], [1, 3, 4], [2, 6]],
        [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
        [[1, 3], [], [2, 4, 5]],
        [[10, 20, 30], [5, 15, 25], [1, 11, 21], [2, 12, 22]]
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç {i}:")
        print(f"  –í—Ö—ñ–¥: {test_case}")
        
        result1 = merge_k_lists(test_case)
        result2 = merge_k_lists_heap(test_case)
        
        print(f"  –ü–æ–ø–∞—Ä–Ω–µ –∑–ª–∏—Ç—Ç—è: {result1}")
        print(f"  Heap –∑–ª–∏—Ç—Ç—è:    {result2}")
        print(f"  –ó–±—ñ–≥–∞—é—Ç—å—Å—è: {'‚úÖ' if result1 == result2 else '‚ùå'}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    print(f"\n‚ö° –¢–ï–°–¢ –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü:")
    large_lists = [[i*10 + j for j in range(100)] for i in range(50)]
    
    import time
    
    start = time.time()
    result1 = merge_k_lists(large_lists)
    time1 = time.time() - start
    
    start = time.time()  
    result2 = merge_k_lists_heap(large_lists)
    time2 = time.time() - start
    
    print(f"  50 —Å–ø–∏—Å–∫—ñ–≤ –ø–æ 100 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:")
    print(f"  –ü–æ–ø–∞—Ä–Ω–µ: {time1*1000:.2f} –º—Å")
    print(f"  Heap:    {time2*1000:.2f} –º—Å")
    print(f"  –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: {time1/time2:.1f}x")

def print_conclusions():
    """–í–∏—Å–Ω–æ–≤–∫–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"""
    print(f"\nüìù –í–ò–°–ù–û–í–ö–ò")
    print("=" * 50)
    
    conclusions = [
        "1. INSERTION SORT:",
        "   ‚Ä¢ –ù–∞–π–∫—Ä–∞—â–∏–π –¥–ª—è –º–∞–ª–∏—Ö –º–∞—Å–∏–≤—ñ–≤ (< 50 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)",
        "   ‚Ä¢ O(n) –¥–ª—è –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö, O(n¬≤) –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö",
        "   ‚Ä¢ –ü—Ä–æ—Å—Ç–∏–π —É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π",
        "",
        "2. MERGE SORT:",
        "   ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞ O(n log n) —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å",
        "   ‚Ä¢ –°—Ç–∞–±—ñ–ª—å–Ω–∏–π, –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å",
        "   ‚Ä¢ –ü–æ—Ç—Ä–µ–±—É—î O(n) –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–∞–º'—è—Ç—ñ",
        "",
        "3. TIMSORT (Python sorted/sort):",
        "   ‚Ä¢ –ì—ñ–±—Ä–∏–¥ merge sort + insertion sort",
        "   ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π - O(n) –¥–ª—è —á–∞—Å—Ç–∫–æ–≤–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö",
        "   ‚Ä¢ –ù–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö",
        "   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π Python",
        "",
        "üéØ –ö–õ–Æ–ß–û–í–ò–ô –í–ò–°–ù–û–í–û–ö:",
        "Timsort –ø–æ–∫–∞–∑—É—î –Ω–∞–π–∫—Ä–∞—â—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞–≤–¥—è–∫–∏:",
        "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é insertion sort –¥–ª—è –º–∞–ª–∏—Ö –ø—ñ–¥–º–∞—Å–∏–≤—ñ–≤",
        "‚Ä¢ –í–∏—è–≤–ª–µ–Ω–Ω—é –Ω–∞—è–≤–Ω–∏—Ö –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π",
        "‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö, —á–∞—Å—Ç–æ —á–∞—Å—Ç–∫–æ–≤–æ –≤–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö",
        "",
        "–°–∞–º–µ —Ç–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å sorted() –∑–∞–º—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–∏—Ö —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ–π!"
    ]
    
    for conclusion in conclusions:
        print(conclusion)

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    results = run_performance_analysis()
    analyze_complexity()
    demonstrate_timsort_efficiency()
    
    # –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    test_merge_k_lists()
    
    # –í–∏—Å–Ω–æ–≤–∫–∏
    print_conclusions()
    
    print(f"\n‚úÖ –ê–ù–ê–õ–Ü–ó –ó–ê–í–ï–†–®–ï–ù–û!")
    print("–î–µ—Ç–∞–ª—å–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ README.md")